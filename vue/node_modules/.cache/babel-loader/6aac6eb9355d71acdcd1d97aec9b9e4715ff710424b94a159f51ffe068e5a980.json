{"ast":null,"code":"/* ECharts 迷你折线图依赖 ↓ */\nimport VChart from 'vue-echarts';\nimport * as echarts from 'echarts/core';\nimport { LineChart } from 'echarts/charts';\nimport { GridComponent, TooltipComponent, DatasetComponent } from 'echarts/components';\nimport { CanvasRenderer } from 'echarts/renderers';\necharts.use([LineChart, GridComponent, TooltipComponent, DatasetComponent, CanvasRenderer]);\n\n/* ► 仅天气卡片用到 axios；系统通用接口仍然走 this.$request */\nimport axios from 'axios';\nexport default {\n  name: 'Home',\n  components: {\n    VChart\n  },\n  data() {\n    return {\n      /* 登录人 */\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}'),\n      /* KPI */\n      kpi: {\n        greenhouseTotal: 0,\n        taskTodo: 0,\n        envAlarm: 0\n      },\n      /* 原始数据缓存 */\n      greenhouses: [],\n      tasks: [],\n      /* 迷你折线图 */\n      miniChart: {},\n      /* 天气卡片 */\n      weather: null\n    };\n  },\n  computed: {\n    /** 待办任务（前 5 条） */\n    todoTasks() {\n      return this.tasks.filter(t => t.completed !== '是').slice(0, 5);\n    }\n  },\n  created() {\n    this.loadGreenhouses();\n    this.loadTasks();\n    this.loadMiniChart();\n    this.loadWeather(); // ← 实时天气\n  },\n\n  methods: {\n    /* ─────────────────── 数据拉取 ─────────────────── */\n\n    /** ① 大棚 */\n    loadGreenhouses() {\n      this.$request.get('/api/greenhouse/getAll').then(res => {\n        this.greenhouses = res.data || [];\n        this.kpi.greenhouseTotal = this.greenhouses.length;\n        this.kpi.envAlarm = this.greenhouses.filter(g => g.temperature > 35 || g.humidity < 30).length;\n      });\n    },\n    /** ② 任务 */\n    loadTasks() {\n      this.$request.get('/api/task/getAll').then(res => {\n        this.tasks = res.data || [];\n        this.kpi.taskTodo = this.tasks.filter(t => t.completed !== '是').length;\n      });\n    },\n    /** ③ 迷你温湿折线图（最近 24h，48 点） */\n    loadMiniChart() {\n      this.$request.get('/api/environment/history/1').then(res => {\n        const rows = (res.data || []).slice(-48);\n        const temp = rows.map(i => i.temperature);\n        const hum = rows.map(i => i.humidity);\n        this.miniChart = {\n          grid: {\n            left: 0,\n            right: 0,\n            top: 10,\n            bottom: 20\n          },\n          tooltip: {\n            trigger: 'axis'\n          },\n          xAxis: {\n            type: 'category',\n            data: rows.map(i => i.recordDate),\n            show: false\n          },\n          yAxis: {\n            type: 'value',\n            show: false\n          },\n          series: [{\n            data: temp,\n            type: 'line',\n            smooth: true,\n            name: '温度',\n            lineStyle: {\n              color: '#ff7f50'\n            }\n          }, {\n            data: hum,\n            type: 'line',\n            smooth: true,\n            name: '湿度',\n            lineStyle: {\n              color: '#1e90ff'\n            }\n          }]\n        };\n      });\n    },\n    /** ④ 实时天气（Open-Meteo 免费接口） */\n    async loadWeather() {\n      try {\n        /* 固定兰州坐标（36.06, 103.84）；也可改成后端配置或浏览器地理定位 */\n        const {\n          data\n        } = await axios.get('https://api.open-meteo.com/v1/forecast', {\n          params: {\n            latitude: 36.06,\n            longitude: 103.84,\n            current_weather: true,\n            timezone: 'auto'\n          }\n        });\n        const cur = data.current_weather || {};\n\n        /* weathercode → 中文描述（常用项） */\n        const codeMap = {\n          0: '晴',\n          1: '少云',\n          2: '少云',\n          3: '多云',\n          45: '雾',\n          48: '雾',\n          51: '细雨',\n          61: '小雨',\n          71: '小雪',\n          95: '雷阵雨'\n        };\n        this.weather = {\n          temp: cur.temperature,\n          text: codeMap[cur.weathercode] || '未知',\n          wind: `风速 ${cur.windspeed} km/h`\n        };\n      } catch (e) {\n        /* 网络失败兜底占位 */\n        this.weather = {\n          temp: '--',\n          text: '获取失败',\n          wind: ''\n        };\n      }\n    },\n    /* ─────────────────── 业务操作 ─────────────────── */\n\n    /** 标记任务完成 */\n    finishTask(row) {\n      row.completed = '是';\n      this.$request.post('/api/task/save', row).then(() => {\n        this.$message.success('已标记完成');\n        this.loadTasks();\n      });\n    },\n    /** 两键全开/关快捷操作 */\n    quickToggle(type, status) {\n      const label = type === 'irrigation' ? '灌溉' : '灯光';\n      this.$confirm(`确认将所有大棚“${label}”统一${status ? '开启' : '关闭'}？`, '提示', {\n        type: 'warning'\n      }).then(() => Promise.all(this.greenhouses.map(g => this.$request.post(`/api/greenhouse/${g.greenhouseId}/toggle/${type}`, {\n        status\n      })))).then(() => {\n        this.$message.success('操作已执行');\n        this.loadGreenhouses();\n      });\n    }\n  }\n};","map":{"version":3,"names":["VChart","echarts","LineChart","GridComponent","TooltipComponent","DatasetComponent","CanvasRenderer","use","axios","name","components","data","user","JSON","parse","localStorage","getItem","kpi","greenhouseTotal","taskTodo","envAlarm","greenhouses","tasks","miniChart","weather","computed","todoTasks","filter","t","completed","slice","created","loadGreenhouses","loadTasks","loadMiniChart","loadWeather","methods","$request","get","then","res","length","g","temperature","humidity","rows","temp","map","i","hum","grid","left","right","top","bottom","tooltip","trigger","xAxis","type","recordDate","show","yAxis","series","smooth","lineStyle","color","params","latitude","longitude","current_weather","timezone","cur","codeMap","text","weathercode","wind","windspeed","e","finishTask","row","post","$message","success","quickToggle","status","label","$confirm","Promise","all","greenhouseId"],"sources":["src/views/manager/Home.vue"],"sourcesContent":["<template>\n  <div class=\"home-container\">\n\n    <!-- ① 欢迎 -->\n    <el-card class=\"greet-card\">\n      您好，{{ user?.userName }}！欢迎使用本系统\n    </el-card>\n\n    <!-- ② 关键指标 -->\n    <div class=\"kpi-wrap\">\n      <el-card class=\"kpi\" body-style=\"padding:16px\">\n        <div class=\"kpi-num\">{{ kpi.greenhouseTotal }}</div>\n        <div class=\"kpi-label\">在线大棚</div>\n      </el-card>\n\n      <el-card class=\"kpi\" body-style=\"padding:16px\">\n        <div class=\"kpi-num\">{{ kpi.taskTodo }}</div>\n        <div class=\"kpi-label\">待办任务</div>\n      </el-card>\n\n      <el-card class=\"kpi\" body-style=\"padding:16px\">\n        <div class=\"kpi-num\">{{ kpi.envAlarm }}</div>\n        <div class=\"kpi-label\">环境报警</div>\n      </el-card>\n    </div>\n\n    <!-- ③ 大棚状态表 -->\n    <el-card shadow=\"always\" class=\"mt20\">\n      <div slot=\"header\" class=\"card-title\">大棚状态 (Top 5)</div>\n      <el-table :data=\"greenhouses.slice(0,5)\" border size=\"mini\">\n        <el-table-column prop=\"greenhouseName\" label=\"名称\"/>\n        <el-table-column prop=\"irrigationStatus\" label=\"灌溉\" width=\"80\">\n          <template slot-scope=\"s\">\n            <el-tag :type=\"s.row.irrigationStatus?'success':'info'\" size=\"mini\">\n              {{ s.row.irrigationStatus ? '✔' : '✘' }}\n            </el-tag>\n          </template>\n        </el-table-column>\n        <el-table-column prop=\"ventilationStatus\" label=\"通风\" width=\"80\">\n          <template slot-scope=\"s\">\n            <el-tag :type=\"s.row.ventilationStatus?'success':'info'\" size=\"mini\">\n              {{ s.row.ventilationStatus ? '✔' : '✘' }}\n            </el-tag>\n          </template>\n        </el-table-column>\n        <el-table-column prop=\"lightingStatus\" label=\"灯光\" width=\"80\">\n          <template slot-scope=\"s\">\n            <el-tag :type=\"s.row.lightingStatus?'warning':'info'\" size=\"mini\">\n              {{ s.row.lightingStatus ? '✔' : '✘' }}\n            </el-tag>\n          </template>\n        </el-table-column>\n        <el-table-column label=\"操作\" width=\"100\">\n          <template slot-scope=\"s\">\n            <el-button type=\"text\" size=\"mini\"\n                       @click=\"$router.push({name:'GreenhouseDetail',query:{id:s.row.greenhouseId}})\">详情</el-button>\n          </template>\n        </el-table-column>\n      </el-table>\n    </el-card>\n\n    <!-- ④ mini 折线图 + 天气 -->\n    <div class=\"mini-section\">\n      <el-card class=\"mini-chart-card\" shadow=\"always\">\n        <div slot=\"header\" class=\"card-title\">温/湿最近 24h</div>\n        <v-chart :option=\"miniChart\" style=\"height:120px\"/>\n      </el-card>\n\n      <el-card class=\"weather-card\" shadow=\"always\">\n        <div slot=\"header\" class=\"card-title\">今日天气</div>\n        <div v-if=\"weather\">\n          <div style=\"font-size:28px\">{{ weather.temp }}°C</div>\n          <div>{{ weather.text }} / {{ weather.wind }}</div>\n        </div>\n        <div v-else>加载中...</div>\n      </el-card>\n    </div>\n\n    <!-- ⑤ 待办任务 -->\n    <el-card shadow=\"always\" class=\"mt20\">\n      <div slot=\"header\" class=\"card-title\">待办任务</div>\n      <el-table :data=\"todoTasks\" stripe size=\"mini\" height=\"220\">\n        <el-table-column prop=\"name\" label=\"任务\"/>\n        <el-table-column prop=\"taskGreenhouseName\" label=\"大棚\" width=\"120\"/>\n        <el-table-column prop=\"deadline\" label=\"截止\" width=\"160\"/>\n        <el-table-column width=\"80\">\n          <template slot=\"header\">操作</template>\n          <template slot-scope=\"s\">\n            <el-button type=\"text\" size=\"mini\" @click=\"finishTask(s.row)\">完成</el-button>\n          </template>\n        </el-table-column>\n      </el-table>\n    </el-card>\n\n    <!-- ⑥ 快捷操作 -->\n    <el-card shadow=\"always\" class=\"mt20\">\n      <div slot=\"header\" class=\"card-title\">快捷操作</div>\n      <el-button type=\"primary\" plain @click=\"quickToggle('irrigation',1)\">全部开启灌溉</el-button>\n      <el-button type=\"warning\" plain class=\"mt10\" @click=\"quickToggle('lighting',0)\">全部关闭灯光</el-button>\n    </el-card>\n\n  </div>\n</template>\n\n<script>\n/* ECharts 迷你折线图依赖 ↓ */\nimport VChart from 'vue-echarts'\nimport * as echarts from 'echarts/core'\nimport { LineChart }                from 'echarts/charts'\nimport { GridComponent,\n  TooltipComponent,\n  DatasetComponent }         from 'echarts/components'\nimport { CanvasRenderer }            from 'echarts/renderers'\necharts.use([LineChart, GridComponent, TooltipComponent, DatasetComponent, CanvasRenderer])\n\n/* ► 仅天气卡片用到 axios；系统通用接口仍然走 this.$request */\nimport axios from 'axios'\n\nexport default {\n  name: 'Home',\n  components: { VChart },\n\n  data () {\n    return {\n      /* 登录人 */\n      user : JSON.parse(localStorage.getItem('xm-user') || '{}'),\n\n      /* KPI */\n      kpi  : { greenhouseTotal: 0, taskTodo: 0, envAlarm: 0 },\n\n      /* 原始数据缓存 */\n      greenhouses : [],\n      tasks       : [],\n\n      /* 迷你折线图 */\n      miniChart : {},\n\n      /* 天气卡片 */\n      weather   : null\n    }\n  },\n\n  computed: {\n    /** 待办任务（前 5 条） */\n    todoTasks () {\n      return this.tasks.filter(t => t.completed !== '是').slice(0, 5)\n    }\n  },\n\n  created () {\n    this.loadGreenhouses()\n    this.loadTasks()\n    this.loadMiniChart()\n    this.loadWeather()           // ← 实时天气\n  },\n\n  methods: {\n    /* ─────────────────── 数据拉取 ─────────────────── */\n\n    /** ① 大棚 */\n    loadGreenhouses () {\n      this.$request.get('/api/greenhouse/getAll').then(res => {\n        this.greenhouses         = res.data || []\n        this.kpi.greenhouseTotal = this.greenhouses.length\n        this.kpi.envAlarm        = this.greenhouses\n            .filter(g => g.temperature > 35 || g.humidity < 30).length\n      })\n    },\n\n    /** ② 任务 */\n    loadTasks () {\n      this.$request.get('/api/task/getAll').then(res => {\n        this.tasks        = res.data || []\n        this.kpi.taskTodo = this.tasks.filter(t => t.completed !== '是').length\n      })\n    },\n\n    /** ③ 迷你温湿折线图（最近 24h，48 点） */\n    loadMiniChart () {\n      this.$request.get('/api/environment/history/1').then(res => {\n        const rows  = (res.data || []).slice(-48)\n        const temp  = rows.map(i => i.temperature)\n        const hum   = rows.map(i => i.humidity)\n\n        this.miniChart = {\n          grid   : { left: 0, right: 0, top: 10, bottom: 20 },\n          tooltip: { trigger: 'axis' },\n          xAxis  : { type: 'category', data: rows.map(i => i.recordDate), show: false },\n          yAxis  : { type: 'value', show: false },\n          series : [\n            { data: temp, type: 'line', smooth: true, name: '温度', lineStyle: { color: '#ff7f50' } },\n            { data: hum,  type: 'line', smooth: true, name: '湿度', lineStyle: { color: '#1e90ff' } }\n          ]\n        }\n      })\n    },\n\n    /** ④ 实时天气（Open-Meteo 免费接口） */\n    async loadWeather () {\n      try {\n        /* 固定兰州坐标（36.06, 103.84）；也可改成后端配置或浏览器地理定位 */\n        const { data } = await axios.get(\n            'https://api.open-meteo.com/v1/forecast',\n            { params: {\n                latitude        : 36.06,\n                longitude       : 103.84,\n                current_weather : true,\n                timezone        : 'auto'\n              }\n            })\n\n        const cur = data.current_weather || {}\n\n        /* weathercode → 中文描述（常用项） */\n        const codeMap = {\n          0:'晴',1:'少云',2:'少云',3:'多云',\n          45:'雾',48:'雾',51:'细雨',61:'小雨',\n          71:'小雪',95:'雷阵雨'\n        }\n\n        this.weather = {\n          temp : cur.temperature,\n          text : codeMap[cur.weathercode] || '未知',\n          wind : `风速 ${cur.windspeed} km/h`\n        }\n      } catch (e) {\n        /* 网络失败兜底占位 */\n        this.weather = { temp: '--', text: '获取失败', wind: '' }\n      }\n    },\n\n    /* ─────────────────── 业务操作 ─────────────────── */\n\n    /** 标记任务完成 */\n    finishTask (row) {\n      row.completed = '是'\n      this.$request.post('/api/task/save', row).then(() => {\n        this.$message.success('已标记完成')\n        this.loadTasks()\n      })\n    },\n\n    /** 两键全开/关快捷操作 */\n    quickToggle (type, status) {\n      const label = type === 'irrigation' ? '灌溉' : '灯光'\n      this.$confirm(`确认将所有大棚“${label}”统一${status ? '开启' : '关闭'}？`,\n          '提示', { type: 'warning' })\n          .then(() => Promise.all(\n              this.greenhouses.map(g =>\n                  this.$request.post(`/api/greenhouse/${g.greenhouseId}/toggle/${type}`, { status })\n              )))\n          .then(() => { this.$message.success('操作已执行'); this.loadGreenhouses() })\n    }\n  }\n}\n</script>\n\n\n<style scoped>\n.home-container { padding:20px }\n.mt20            { margin-top:20px }\n.greet-card      { font-weight:600;font-size:20px }\n.card-title      { font-weight:600 }\n\n.kpi-wrap { display:flex; gap:20px; margin:20px 0 }\n.kpi      { flex:1; text-align:center }\n.kpi-num  { font-size:32px; font-weight:700 }\n.kpi-label{ color:#888 }\n\n.mini-section      { display:flex; gap:20px; margin-top:20px }\n.mini-chart-card   { flex:2 }\n.weather-card      { flex:1; display:flex; justify-content:center; align-items:center }\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}