{"ast":null,"code":"export default {\n  name: 'TaskList',\n  data() {\n    return {\n      tasks: [],\n      searchKey: '',\n      multipleSelection: [],\n      dialogVisible: false,\n      greenhouses: [],\n      farmers: [],\n      form: {},\n      rules: {\n        name: [{\n          required: true,\n          message: '请输入任务名称',\n          trigger: 'blur'\n        }],\n        taskContent: [{\n          required: true,\n          message: '请输入任务内容',\n          trigger: 'blur'\n        }],\n        taskGreenhouseName: [{\n          required: true,\n          message: '请选择所属大棚',\n          trigger: 'change'\n        }],\n        assignedUserId: [{\n          required: true,\n          message: '请选择指派用户',\n          trigger: 'change'\n        }]\n      }\n    };\n  },\n  computed: {\n    filteredTasks() {\n      const k = this.searchKey.trim();\n      if (!k) return this.tasks;\n      return this.tasks.filter(t => (t.name || '').includes(k) || (t.taskGreenhouseName || '').includes(k) || (t.assignedUserName || '').includes(k));\n    }\n  },\n  created() {\n    this.loadTasks();\n  },\n  methods: {\n    /* -------- 列表 -------- */\n    loadTasks() {\n      this.$request.get('/api/task/getAll').then(res => {\n        this.tasks = res.data || [];\n      });\n    },\n    handleDelete(id) {\n      this.$confirm('确认删除该任务？', '提示', {\n        type: 'warning'\n      }).then(() => this.$request.delete(`/api/task/delete/${id}`)).then(() => {\n        this.$message.success('删除成功');\n        this.loadTasks();\n      });\n    },\n    handleBatchDelete() {\n      const ids = this.multipleSelection.map(i => i.taskId);\n      if (!ids.length) return;\n      this.$confirm(`确认删除选中的 ${ids.length} 条任务？`, '提示', {\n        type: 'warning'\n      }).then(() => this.$request.post('/api/task/deleteBatch', ids)).then(() => {\n        this.$message.success('删除成功');\n        this.loadTasks();\n      });\n    },\n    /* -------- 弹窗 -------- */\n    openEdit(row = null) {\n      this.form = row ? {\n        ...row\n      } : {\n        completed: '否'\n      };\n      this.dialogVisible = true;\n      this.$nextTick(() => this.$refs.formRef && this.$refs.formRef.clearValidate());\n\n      // 懒加载下拉\n      if (!this.greenhouses.length) {\n        this.$request.get('/api/greenhouse/getAll').then(r => {\n          this.greenhouses = r.data || [];\n        });\n      }\n      if (!this.farmers.length) {\n        this.$request.get('/api/user/getFarmers').then(r => {\n          this.farmers = r.data || [];\n        });\n      }\n    },\n    /* 选完用户后，把用户名同步到表单，保存后前端立即可见 */\n    syncUserName(uid) {\n      const u = this.farmers.find(f => f.userId === uid);\n      this.form.assignedUserName = u ? u.userName : '';\n    },\n    submitForm() {\n      this.$refs.formRef.validate(valid => {\n        if (!valid) return;\n        this.$request.post('/api/task/save', this.form).then(() => {\n          this.$message.success('保存成功');\n          this.dialogVisible = false;\n          this.loadTasks();\n        });\n      });\n    },\n    resetForm() {\n      this.$refs.formRef && this.$refs.formRef.resetFields();\n      this.form = {};\n    }\n  }\n};","map":{"version":3,"names":["name","data","tasks","searchKey","multipleSelection","dialogVisible","greenhouses","farmers","form","rules","required","message","trigger","taskContent","taskGreenhouseName","assignedUserId","computed","filteredTasks","k","trim","filter","t","includes","assignedUserName","created","loadTasks","methods","$request","get","then","res","handleDelete","id","$confirm","type","delete","$message","success","handleBatchDelete","ids","map","i","taskId","length","post","openEdit","row","completed","$nextTick","$refs","formRef","clearValidate","r","syncUserName","uid","u","find","f","userId","userName","submitForm","validate","valid","resetForm","resetFields"],"sources":["src/views/manager/TaskList.vue"],"sourcesContent":["<template>\n  <div class=\"task-page\">\n    <!-- ▍工具栏 -->\n    <div class=\"toolbar\">\n      <div>\n        <el-button type=\"success\" @click=\"openEdit()\">新增任务</el-button>\n        <el-button type=\"danger\"\n                   :disabled=\"!multipleSelection.length\"\n                   @click=\"handleBatchDelete\">批量删除</el-button>\n      </div>\n\n      <!-- ▍搜索 -->\n      <el-input v-model=\"searchKey\"\n                placeholder=\"搜索任务 / 大棚 / 用户\"\n                size=\"small\"\n                style=\"max-width:260px\"\n                clearable\n                @keyup.enter.native=\"loadTasks\">\n        <template #append>\n          <el-button icon=\"el-icon-search\" @click=\"loadTasks\"/>\n        </template>\n      </el-input>\n    </div>\n\n    <!-- ▍任务表格 -->\n    <el-table :data=\"filteredTasks\" border stripe\n              style=\"width:100%\"\n              @selection-change=\"multipleSelection = $event\">\n      <el-table-column type=\"selection\" width=\"46\"/>\n      <el-table-column prop=\"taskId\" label=\"ID\" width=\"70\" align=\"center\"/>\n      <el-table-column prop=\"name\" label=\"任务名称\" min-width=\"150\"/>\n      <el-table-column prop=\"taskContent\" label=\"任务内容\" min-width=\"180\" show-overflow-tooltip/>\n      <el-table-column prop=\"taskGreenhouseName\" label=\"所属大棚\" min-width=\"120\"/>\n\n      <!-- 只显示用户名 -->\n      <el-table-column prop=\"assignedUserName\" label=\"指派用户\" min-width=\"120\"/>\n\n      <el-table-column label=\"完成状态\" width=\"90\" align=\"center\">\n        <template #default=\"{ row }\">\n          <el-tag :type=\"row.completed === '是' ? 'success' : 'info'\" size=\"mini\">\n            {{ row.completed === '是' ? '已完成' : '未完成' }}\n          </el-tag>\n        </template>\n      </el-table-column>\n\n      <el-table-column prop=\"publishTime\" label=\"发布时间\" min-width=\"140\"/>\n      <el-table-column prop=\"deadline\"    label=\"截止时间\"   min-width=\"140\"/>\n      <el-table-column prop=\"taskDescription\" label=\"备注\" min-width=\"140\" show-overflow-tooltip/>\n\n      <!-- ▍操作 -->\n      <el-table-column label=\"操作\" width=\"180\" fixed=\"right\">\n        <template #default=\"{ row }\">\n          <el-button size=\"mini\" type=\"primary\" @click=\"openEdit(row)\">编辑</el-button>\n          <el-button size=\"mini\" type=\"danger\"  @click=\"handleDelete(row.taskId)\">删除</el-button>\n        </template>\n      </el-table-column>\n    </el-table>\n\n    <!-- ▍弹窗：新增 / 编辑 -->\n    <el-dialog :title=\"form.taskId ? '编辑任务' : '新增任务'\"\n               :visible.sync=\"dialogVisible\"\n               width=\"540px\"\n               @close=\"resetForm\">\n      <el-form :model=\"form\" :rules=\"rules\" ref=\"formRef\" label-width=\"95px\">\n        <el-form-item label=\"任务名称\" prop=\"name\">\n          <el-input v-model=\"form.name\"/>\n        </el-form-item>\n\n        <el-form-item label=\"任务内容\" prop=\"taskContent\">\n          <el-input v-model=\"form.taskContent\"\n                    type=\"textarea\" :rows=\"3\"\n                    maxlength=\"200\" show-word-limit/>\n        </el-form-item>\n\n        <el-form-item label=\"所属大棚\" prop=\"taskGreenhouseName\">\n          <el-select v-model=\"form.taskGreenhouseName\" placeholder=\"请选择\" filterable clearable>\n            <el-option v-for=\"g in greenhouses\"\n                       :key=\"g.greenhouseName\"\n                       :label=\"g.greenhouseName\"\n                       :value=\"g.greenhouseName\"/>\n          </el-select>\n        </el-form-item>\n\n        <!-- 指派用户 -->\n        <el-form-item label=\"指派用户\" prop=\"assignedUserId\">\n          <el-select v-model=\"form.assignedUserId\"\n                     placeholder=\"请选择\"\n                     filterable clearable\n                     @change=\"syncUserName\">\n            <el-option v-for=\"u in farmers\"\n                       :key=\"u.userId\"\n                       :label=\"u.userName\"\n                       :value=\"u.userId\"/>\n          </el-select>\n        </el-form-item>\n\n        <el-form-item label=\"截止时间\" prop=\"deadline\">\n          <el-date-picker v-model=\"form.deadline\" type=\"datetime\"\n                          placeholder=\"选择截止时间\" style=\"width:100%\"/>\n        </el-form-item>\n\n        <el-form-item label=\"备注\">\n          <el-input v-model=\"form.taskDescription\"\n                    type=\"textarea\" :rows=\"2\"\n                    maxlength=\"120\" show-word-limit/>\n        </el-form-item>\n      </el-form>\n\n      <template #footer>\n        <el-button @click=\"dialogVisible = false\">取消</el-button>\n        <el-button type=\"primary\" @click=\"submitForm\">保存</el-button>\n      </template>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'TaskList',\n  data () {\n    return {\n      tasks: [],\n      searchKey: '',\n      multipleSelection: [],\n\n      dialogVisible: false,\n      greenhouses: [],\n      farmers: [],\n      form: {},\n\n      rules: {\n        name:               [{ required: true, message: '请输入任务名称', trigger: 'blur' }],\n        taskContent:        [{ required: true, message: '请输入任务内容', trigger: 'blur' }],\n        taskGreenhouseName: [{ required: true, message: '请选择所属大棚', trigger: 'change' }],\n        assignedUserId:     [{ required: true, message: '请选择指派用户',  trigger: 'change' }]\n      }\n    };\n  },\n\n  computed: {\n    filteredTasks () {\n      const k = this.searchKey.trim();\n      if (!k) return this.tasks;\n      return this.tasks.filter(t =>\n          (t.name || '').includes(k) ||\n          (t.taskGreenhouseName || '').includes(k) ||\n          (t.assignedUserName || '').includes(k)\n      );\n    }\n  },\n\n  created () { this.loadTasks(); },\n\n  methods: {\n    /* -------- 列表 -------- */\n    loadTasks () {\n      this.$request.get('/api/task/getAll').then(res => {\n        this.tasks = res.data || [];\n      });\n    },\n\n    handleDelete (id) {\n      this.$confirm('确认删除该任务？', '提示', { type:'warning' })\n          .then(() => this.$request.delete(`/api/task/delete/${id}`))\n          .then(() => { this.$message.success('删除成功'); this.loadTasks(); });\n    },\n\n    handleBatchDelete () {\n      const ids = this.multipleSelection.map(i => i.taskId);\n      if (!ids.length) return;\n      this.$confirm(`确认删除选中的 ${ids.length} 条任务？`, '提示', { type:'warning' })\n          .then(() => this.$request.post('/api/task/deleteBatch', ids))\n          .then(() => { this.$message.success('删除成功'); this.loadTasks(); });\n    },\n\n    /* -------- 弹窗 -------- */\n    openEdit (row = null) {\n      this.form          = row ? { ...row } : { completed:'否' };\n      this.dialogVisible = true;\n      this.$nextTick(() => this.$refs.formRef && this.$refs.formRef.clearValidate());\n\n      // 懒加载下拉\n      if (!this.greenhouses.length) {\n        this.$request.get('/api/greenhouse/getAll').then(r => { this.greenhouses = r.data || []; });\n      }\n      if (!this.farmers.length) {\n        this.$request.get('/api/user/getFarmers').then(r => { this.farmers = r.data || []; });\n      }\n    },\n\n    /* 选完用户后，把用户名同步到表单，保存后前端立即可见 */\n    syncUserName (uid) {\n      const u = this.farmers.find(f => f.userId === uid);\n      this.form.assignedUserName = u ? u.userName : '';\n    },\n\n    submitForm () {\n      this.$refs.formRef.validate(valid => {\n        if (!valid) return;\n        this.$request.post('/api/task/save', this.form)\n            .then(() => {\n              this.$message.success('保存成功');\n              this.dialogVisible = false;\n              this.loadTasks();\n            });\n      });\n    },\n\n    resetForm () {\n      this.$refs.formRef && this.$refs.formRef.resetFields();\n      this.form = {};\n    }\n  }\n};\n</script>\n\n<style scoped>\n.task-page { padding: 15px }\n.toolbar   { display: flex; justify-content: space-between; margin-bottom: 12px }\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}