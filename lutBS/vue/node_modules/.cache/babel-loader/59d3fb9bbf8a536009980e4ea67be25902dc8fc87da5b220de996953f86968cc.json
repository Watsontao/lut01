{"ast":null,"code":"/* ——— ECharts ——— */\nimport VChart from 'vue-echarts';\nimport * as echarts from 'echarts/core';\nimport { LineChart } from 'echarts/charts';\nimport { GridComponent, TooltipComponent, DatasetComponent } from 'echarts/components';\nimport { CanvasRenderer } from 'echarts/renderers';\necharts.use([LineChart, GridComponent, TooltipComponent, DatasetComponent, CanvasRenderer]);\n\n/* ——— 实时天气 axios ——— */\nimport axios from 'axios';\nexport default {\n  name: 'Home',\n  components: {\n    VChart\n  },\n  data() {\n    return {\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}'),\n      kpi: {\n        greenhouseTotal: 0,\n        taskTodo: 0,\n        envAlarm: 0\n      },\n      greenhouses: [],\n      tasks: [],\n      farmers: [],\n      farmerMap: {},\n      miniChart: {},\n      weather: null\n    };\n  },\n  computed: {\n    todoTasks() {\n      return this.tasks.filter(t => t.completed !== '是').slice(0, 5);\n    }\n  },\n  created() {\n    this.loadGreenhouses();\n    this.loadUsers().then(() => this.loadTasks());\n    this.loadMiniChart();\n    this.loadWeather();\n  },\n  methods: {\n    /* ───────── 数据拉取 ───────── */\n\n    loadGreenhouses() {\n      this.$request.get('/api/greenhouse/getAll').then(res => {\n        this.greenhouses = res.data || [];\n        this.kpi.greenhouseTotal = this.greenhouses.length;\n        this.kpi.envAlarm = this.greenhouses.filter(g => g.temperature > 35 || g.humidity < 30).length;\n      });\n    },\n    /* 拉取农工 (role=`farmer`)，建立 id→name 映射 */\n    loadUsers() {\n      return this.$request.get('/api/user/getAllUser').then(res => {\n        // <— ★ 换成你的“查全部用户”接口\n        this.farmers = res.data || [];\n        this.farmerMap = Object.fromEntries(this.farmers.map(f => [f.userId, f.username]));\n      });\n    },\n    loadTasks() {\n      this.$request.get('/api/task/getAll').then(res => {\n        this.tasks = res.data || [];\n        this.kpi.taskTodo = this.tasks.filter(t => t.completed !== '是').length;\n      });\n    },\n    loadMiniChart() {\n      this.$request.get('/api/environment/history/1').then(res => {\n        const rows = (res.data || []).slice(-48); // 24h × 2 = 48\n        this.miniChart = {\n          grid: {\n            left: 0,\n            right: 0,\n            top: 10,\n            bottom: 20\n          },\n          tooltip: {\n            trigger: 'axis'\n          },\n          xAxis: {\n            type: 'category',\n            data: rows.map(i => i.recordDate),\n            show: false\n          },\n          yAxis: {\n            type: 'value',\n            show: false\n          },\n          series: [{\n            name: '温度',\n            data: rows.map(i => i.temperature),\n            type: 'line',\n            smooth: true,\n            lineStyle: {\n              color: '#ff7f50'\n            }\n          }, {\n            name: '湿度',\n            data: rows.map(i => i.humidity),\n            type: 'line',\n            smooth: true,\n            lineStyle: {\n              color: '#1e90ff'\n            }\n          }]\n        };\n      });\n    },\n    /* Open-Meteo 免费天气接口示例 */\n    async loadWeather() {\n      try {\n        const {\n          data\n        } = await axios.get('https://api.open-meteo.com/v1/forecast', {\n          params: {\n            latitude: 36.06,\n            longitude: 103.84,\n            current_weather: true,\n            timezone: 'auto'\n          }\n        });\n        const cur = data.current_weather || {};\n        const codeMap = {\n          0: '晴',\n          1: '少云',\n          2: '少云',\n          3: '多云',\n          45: '雾',\n          48: '雾',\n          51: '细雨',\n          61: '小雨',\n          71: '小雪',\n          95: '雷阵雨'\n        };\n        this.weather = {\n          temp: cur.temperature,\n          text: codeMap[cur.weathercode] || '未知',\n          wind: `风速 ${cur.windspeed} km/h`\n        };\n      } catch (e) {\n        this.weather = {\n          temp: '--',\n          text: '获取失败',\n          wind: ''\n        };\n      }\n    },\n    /* ───────── 业务操作 ───────── */\n\n    finishTask(row) {\n      row.completed = '是';\n      this.$request.post('/api/task/save', row).then(() => {\n        this.$message.success('已标记完成');\n        this.loadTasks();\n      });\n    },\n    quickToggle(type, status) {\n      const label = type === 'irrigation' ? '灌溉' : '灯光';\n      this.$confirm(`确认将所有大棚“${label}”统一${status ? '开启' : '关闭'}？`, '提示', {\n        type: 'warning'\n      }).then(() => Promise.all(this.greenhouses.map(g => this.$request.post(`/api/greenhouse/${g.greenhouseId}/toggle/${type}`, {\n        status\n      })))).then(() => {\n        this.$message.success('操作已执行');\n        this.loadGreenhouses();\n      });\n    }\n  }\n};","map":{"version":3,"names":["VChart","echarts","LineChart","GridComponent","TooltipComponent","DatasetComponent","CanvasRenderer","use","axios","name","components","data","user","JSON","parse","localStorage","getItem","kpi","greenhouseTotal","taskTodo","envAlarm","greenhouses","tasks","farmers","farmerMap","miniChart","weather","computed","todoTasks","filter","t","completed","slice","created","loadGreenhouses","loadUsers","then","loadTasks","loadMiniChart","loadWeather","methods","$request","get","res","length","g","temperature","humidity","Object","fromEntries","map","f","userId","username","rows","grid","left","right","top","bottom","tooltip","trigger","xAxis","type","i","recordDate","show","yAxis","series","smooth","lineStyle","color","params","latitude","longitude","current_weather","timezone","cur","codeMap","temp","text","weathercode","wind","windspeed","e","finishTask","row","post","$message","success","quickToggle","status","label","$confirm","Promise","all","greenhouseId"],"sources":["src/views/manager/Home.vue"],"sourcesContent":["<template>\n  <div class=\"home-container\">\n\n    <!-- ① 欢迎 -->\n    <el-card class=\"greet-card\">\n      您好，{{ user?.userName }}！欢迎使用本系统\n    </el-card>\n\n    <!-- ② 关键指标 -->\n    <div class=\"kpi-wrap\">\n      <el-card class=\"kpi\" body-style=\"padding:16px\">\n        <div class=\"kpi-num\">{{ kpi.greenhouseTotal }}</div>\n        <div class=\"kpi-label\">在线大棚</div>\n      </el-card>\n\n      <el-card class=\"kpi\" body-style=\"padding:16px\">\n        <div class=\"kpi-num\">{{ kpi.taskTodo }}</div>\n        <div class=\"kpi-label\">待办任务</div>\n      </el-card>\n\n      <el-card class=\"kpi\" body-style=\"padding:16px\">\n        <div class=\"kpi-num\">{{ kpi.envAlarm }}</div>\n        <div class=\"kpi-label\">环境报警</div>\n      </el-card>\n    </div>\n\n    <!-- ③ 大棚状态 -->\n    <el-card shadow=\"always\" class=\"mt20\">\n      <div slot=\"header\" class=\"card-title\">大棚状态 (Top 5)</div>\n      <el-table :data=\"greenhouses.slice(0,5)\" border size=\"mini\">\n        <el-table-column prop=\"greenhouseName\" label=\"名称\"/>\n        <el-table-column prop=\"irrigationStatus\" label=\"灌溉\" width=\"80\">\n          <template slot-scope=\"s\">\n            <el-tag :type=\"s.row.irrigationStatus?'success':'info'\" size=\"mini\">\n              {{ s.row.irrigationStatus ? '✔' : '✘' }}\n            </el-tag>\n          </template>\n        </el-table-column>\n        <el-table-column prop=\"ventilationStatus\" label=\"通风\" width=\"80\">\n          <template slot-scope=\"s\">\n            <el-tag :type=\"s.row.ventilationStatus?'success':'info'\" size=\"mini\">\n              {{ s.row.ventilationStatus ? '✔' : '✘' }}\n            </el-tag>\n          </template>\n        </el-table-column>\n        <el-table-column prop=\"lightingStatus\" label=\"灯光\" width=\"80\">\n          <template slot-scope=\"s\">\n            <el-tag :type=\"s.row.lightingStatus?'warning':'info'\" size=\"mini\">\n              {{ s.row.lightingStatus ? '✔' : '✘' }}\n            </el-tag>\n          </template>\n        </el-table-column>\n        <el-table-column label=\"操作\" width=\"100\">\n          <template slot-scope=\"s\">\n            <el-button type=\"text\" size=\"mini\"\n                       @click=\"$router.push({name:'GreenhouseDetail',query:{id:s.row.greenhouseId}})\">详情\n            </el-button>\n          </template>\n        </el-table-column>\n      </el-table>\n    </el-card>\n\n    <!-- ④ 迷你折线图 + 天气 -->\n    <div class=\"mini-section\">\n      <el-card class=\"mini-chart-card\" shadow=\"always\">\n        <div slot=\"header\" class=\"card-title\">温/湿最近 24 h</div>\n        <v-chart :option=\"miniChart\" style=\"height:120px\"/>\n      </el-card>\n\n      <el-card class=\"weather-card\" shadow=\"always\">\n        <div slot=\"header\" class=\"card-title\">今日天气</div>\n        <div v-if=\"weather\">\n          <div style=\"font-size:28px\">{{ weather.temp }}°C</div>\n          <div>{{ weather.text }} / {{ weather.wind }}</div>\n        </div>\n        <div v-else>加载中...</div>\n      </el-card>\n    </div>\n\n    <!-- ⑤ 待办任务 -->\n    <el-card shadow=\"always\" class=\"mt20\">\n      <div slot=\"header\" class=\"card-title\">待办任务</div>\n      <el-table :data=\"todoTasks\" stripe size=\"mini\" height=\"220\">\n        <el-table-column prop=\"name\" label=\"任务\"/>\n        <el-table-column prop=\"taskGreenhouseName\" label=\"大棚\" width=\"120\"/>\n        <!-- 新增农工列 -->\n        <el-table-column label=\"指派农工\" width=\"120\">\n          <template slot-scope=\"s\">\n            {{ farmerMap[s.row.assignedUserId] || ('ID:' + s.row.assignedUserId) }}\n          </template>\n        </el-table-column>\n        <el-table-column prop=\"deadline\" label=\"截止\" width=\"160\"/>\n        <el-table-column width=\"80\">\n          <template slot=\"header\">操作</template>\n          <template slot-scope=\"s\">\n            <el-button type=\"text\" size=\"mini\" @click=\"finishTask(s.row)\">完成</el-button>\n          </template>\n        </el-table-column>\n      </el-table>\n    </el-card>\n\n    <!-- ⑥ 快捷操作 -->\n    <el-card shadow=\"always\" class=\"mt20\">\n      <div slot=\"header\" class=\"card-title\">快捷操作</div>\n      <el-button type=\"primary\" plain @click=\"quickToggle('irrigation',1)\">全部开启灌溉</el-button>\n      <el-button type=\"warning\" plain class=\"mt10\" @click=\"quickToggle('lighting',0)\">全部关闭灯光</el-button>\n    </el-card>\n\n  </div>\n</template>\n\n<script>\n/* ——— ECharts ——— */\nimport VChart from 'vue-echarts'\nimport * as echarts from 'echarts/core'\nimport {LineChart} from 'echarts/charts'\nimport {\n  GridComponent,\n  TooltipComponent,\n  DatasetComponent\n} from 'echarts/components'\nimport {CanvasRenderer} from 'echarts/renderers'\n\necharts.use([LineChart, GridComponent, TooltipComponent, DatasetComponent, CanvasRenderer])\n\n/* ——— 实时天气 axios ——— */\nimport axios from 'axios'\n\nexport default {\n  name: 'Home',\n  components: {VChart},\n\n  data() {\n    return {\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}'),\n\n      kpi: {greenhouseTotal: 0, taskTodo: 0, envAlarm: 0},\n\n      greenhouses: [],\n      tasks: [],\n\n      farmers: [],\n      farmerMap: {},\n\n      miniChart: {},\n      weather: null\n    }\n  },\n\n  computed: {\n    todoTasks() {\n      return this.tasks.filter(t => t.completed !== '是').slice(0, 5)\n    }\n  },\n\n  created() {\n    this.loadGreenhouses()\n    this.loadUsers().then(() => this.loadTasks())\n    this.loadMiniChart()\n    this.loadWeather()\n  },\n\n  methods: {\n    /* ───────── 数据拉取 ───────── */\n\n    loadGreenhouses() {\n      this.$request.get('/api/greenhouse/getAll').then(res => {\n        this.greenhouses = res.data || []\n        this.kpi.greenhouseTotal = this.greenhouses.length\n        this.kpi.envAlarm = this.greenhouses\n            .filter(g => g.temperature > 35 || g.humidity < 30).length\n      })\n    },\n\n    /* 拉取农工 (role=`farmer`)，建立 id→name 映射 */\n    loadUsers() {\n      return this.$request.get('/api/user/getAllUser').then(res => {   // <— ★ 换成你的“查全部用户”接口\n        this.farmers = res.data || []\n        this.farmerMap = Object.fromEntries(this.farmers.map(f => [f.userId, f.username]))\n      })\n\n    },\n\n    loadTasks() {\n      this.$request.get('/api/task/getAll').then(res => {\n        this.tasks = res.data || []\n        this.kpi.taskTodo = this.tasks.filter(t => t.completed !== '是').length\n      })\n    },\n\n    loadMiniChart() {\n      this.$request.get('/api/environment/history/1').then(res => {\n        const rows = (res.data || []).slice(-48)       // 24h × 2 = 48\n        this.miniChart = {\n          grid: {left: 0, right: 0, top: 10, bottom: 20},\n          tooltip: {trigger: 'axis'},\n          xAxis: {type: 'category', data: rows.map(i => i.recordDate), show: false},\n          yAxis: {type: 'value', show: false},\n          series: [\n            {\n              name: '温度', data: rows.map(i => i.temperature), type: 'line', smooth: true,\n              lineStyle: {color: '#ff7f50'}\n            },\n            {\n              name: '湿度', data: rows.map(i => i.humidity), type: 'line', smooth: true,\n              lineStyle: {color: '#1e90ff'}\n            }\n          ]\n        }\n      })\n    },\n\n    /* Open-Meteo 免费天气接口示例 */\n    async loadWeather() {\n      try {\n        const {data} = await axios.get(\n            'https://api.open-meteo.com/v1/forecast',\n            {\n              params: {\n                latitude: 36.06, longitude: 103.84,\n                current_weather: true, timezone: 'auto'\n              }\n            })\n        const cur = data.current_weather || {}\n        const codeMap = {\n          0: '晴', 1: '少云', 2: '少云', 3: '多云', 45: '雾', 48: '雾',\n          51: '细雨', 61: '小雨', 71: '小雪', 95: '雷阵雨'\n        }\n        this.weather = {\n          temp: cur.temperature,\n          text: codeMap[cur.weathercode] || '未知',\n          wind: `风速 ${cur.windspeed} km/h`\n        }\n      } catch (e) {\n        this.weather = {temp: '--', text: '获取失败', wind: ''}\n      }\n    },\n\n    /* ───────── 业务操作 ───────── */\n\n    finishTask(row) {\n      row.completed = '是'\n      this.$request.post('/api/task/save', row).then(() => {\n        this.$message.success('已标记完成')\n        this.loadTasks()\n      })\n    },\n\n    quickToggle(type, status) {\n      const label = type === 'irrigation' ? '灌溉' : '灯光'\n      this.$confirm(`确认将所有大棚“${label}”统一${status ? '开启' : '关闭'}？`,\n          '提示', {type: 'warning'})\n          .then(() => Promise.all(\n              this.greenhouses.map(g =>\n                  this.$request.post(`/api/greenhouse/${g.greenhouseId}/toggle/${type}`, {status}))\n          ))\n          .then(() => {\n            this.$message.success('操作已执行');\n            this.loadGreenhouses()\n          })\n    }\n  }\n}\n</script>\n\n<style scoped>\n.home-container {\n  padding: 20px\n}\n\n.mt20 {\n  margin-top: 20px\n}\n\n.greet-card {\n  font-weight: 600;\n  font-size: 20px\n}\n\n.card-title {\n  font-weight: 600\n}\n\n.kpi-wrap {\n  display: flex;\n  gap: 20px;\n  margin: 20px 0\n}\n\n.kpi {\n  flex: 1;\n  text-align: center\n}\n\n.kpi-num {\n  font-size: 32px;\n  font-weight: 700\n}\n\n.kpi-label {\n  color: #888\n}\n\n.mini-section {\n  display: flex;\n  gap: 20px;\n  margin-top: 20px\n}\n\n.mini-chart-card {\n  flex: 2\n}\n\n.weather-card {\n  flex: 1;\n  display: flex;\n  justify-content: center;\n  align-items: center\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}